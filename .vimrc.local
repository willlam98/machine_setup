set termencoding=utf-8
set encoding=utf8

call plug#begin('~/.vim/plugged')
  Plug 'prabirshrestha/vim-lsp'
  Plug 'mattn/vim-lsp-settings'
  Plug 'prabirshrestha/asyncomplete.vim'

  Plug 'preservim/nerdtree'
  Plug 'airblade/vim-gitgutter'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install()  }  }
  Plug 'junegunn/fzf.vim'
  Plug 'tmsvg/pear-tree'
  Plug 'ekalinin/Dockerfile.vim'

  " autocomplete hinting
  " requirements:
  " pip3 install pynvim typing_exntensions
  " apt install npm
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
  Plug 'Shougo/neosnippet.vim'
  Plug 'Shougo/neosnippet-snippets'
call plug#end()

let g:deoplete#enable_at_startup = 1
let g:pear_tree_repeatable_expand = 0

set background=dark
colorscheme industry
let g:airline_theme='minimalist'

if has("autocmd")
	au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
	\| exe "normal! g'\"" | endif
endif

set nu
syntax on
set whichwrap+=<,>,[,]
set backspace=indent,eol,start
set mouse=a
set wildmode=longest,list,full
set wildmenu "menu
"set textwidth=80
set tabstop=4
set shiftwidth=4
set autoindent
set cursorline
set fileencodings=utf8,ucs-bom,gbk,cp936,gb2312,gb18030
set list
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·
set updatetime=100
set hlsearch
set incsearch

set undodir=~/.vim/undo-dir
set undofile

if !isdirectory($HOME."/.vim/undo-dir")
	call mkdir($HOME."/.vim/undo-dir", "p")
endif

autocmd BufNewFile,BufRead *.service* set ft=systemd


nnoremap <silent> f :Files<CR>

nnoremap <C-e> :NERDTreeToggle<CR>

" lsp
function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')

    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
