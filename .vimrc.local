set termencoding=utf-8
set encoding=utf8
set termguicolors

" install vim-plug
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
" https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
call plug#begin('~/.vim/plugged')
  Plug 'prabirshrestha/vim-lsp'
  Plug 'mattn/vim-lsp-settings'
  Plug 'prabirshrestha/asyncomplete.vim'
  Plug 'prabirshrestha/asyncomplete-lsp.vim'

  Plug 'preservim/nerdtree'
  Plug 'airblade/vim-gitgutter'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install()  }  }
  Plug 'junegunn/fzf.vim'
  Plug 'tmsvg/pear-tree'
  Plug 'vim-scripts/taglist.vim'

  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
  Plug 'Shougo/neosnippet.vim'
  Plug 'Shougo/neosnippet-snippets'

  " gruvbox colorscheme
  Plug 'morhetz/gruvbox'
  Plug 'sainnhe/gruvbox-material'
call plug#end()

let g:deoplete#enable_at_startup = 1
let g:pear_tree_repeatable_expand = 0
let g:lsp_diagnostics_virtual_text_enabled = 0
let g:lsp_document_highlight_enabled = 0
let g:lsp_diagnostics_enabled = 0

"let g:gruvbox_italic=1 "require terminal to support italic (iTerm2), using TERM=xterm-256color
let g:gruvbox_material_background = 'soft'
set background=dark
colorscheme gruvbox-material

"let g:airline_theme='minimalist'
if has("autocmd")
	au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
	\| exe "normal! g'\"" | endif
endif

syntax on
set nu
set wildmode=longest,list,full
set wildmenu
set whichwrap+=<,>,[,]
set backspace=indent,eol,start
set mouse=a
"set textwidth=80
set tabstop=4
set shiftwidth=4
set autoindent
set cursorline
set fileencodings=utf8,ucs-bom,gbk,cp936,gb2312,gb18030
set list
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·
set updatetime=100
set hlsearch
set incsearch

autocmd BufNewFile,BufRead *.service* set ft=systemd


set undodir=~/.vim/undo-dir
set undofile

if !isdirectory($HOME."/.vim/undo-dir")
	call mkdir($HOME."/.vim/undo-dir", "p")
endif

nnoremap <silent> f :Files<CR>

nnoremap <C-e> :NERDTreeToggle<CR>

" lsp
"function! s:on_lsp_buffer_enabled() abort
"    setlocal omnifunc=lsp#complete
"    setlocal signcolumn=yes
"    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
"    nmap <buffer> gd <plug>(lsp-definition)
"    nmap <buffer> gs <plug>(lsp-document-symbol-search)
"    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
"    nmap <buffer> gr <plug>(lsp-references)
"    nmap <buffer> gi <plug>(lsp-implementation)
"    nmap <buffer> gt <plug>(lsp-type-definition)
""    nmap <buffer> <leader>rn <plug>(lsp-rename)
""    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
""    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
"    nmap <buffer> K <plug>(lsp-hover)
"
"    let g:lsp_format_sync_timeout = 1000
"    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
"
"    " refer to doc to add more commands
"endfunction
"
"augroup lsp_install
"    au!
"    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
"    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
"augroup END

command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, '--ignore=tags', fzf#vim#with_preview(), <bang>0)

inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

nnoremap tt :Tlist<CR>

if executable('rust-analyzer')
  au User lsp_setup call lsp#register_server({
        \   'name': 'Rust Language Server',
        \   'cmd': {server_info->['rust-analyzer']},
        \   'whitelist': ['rust'],
        \   'initialization_options': {
        \     'cargo': {
        \       'buildScripts': {
        \         'enable': v:true,
        \       },
        \     },
        \     'procMacro': {
        \       'enable': v:true,
        \     },
        \   },
        \ })
endif


